import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Download historical data from Yahoo Finance
ticker = 'AAPL'  # Apple Inc. ticker symbol
start_date = '2010-01-01'
end_date = '2023-01-01'

data = yf.download(ticker, start=start_date, end=end_date)

# Ensure the date index has a daily frequency
data.index = pd.to_datetime(data.index)
data = data.asfreq('D')
data = data.fillna(method='ffill')  # Forward fill to handle missing values

from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_squared_error

# Fit ARIMA model
model_arima = ARIMA(data['Close'], order=(5, 1, 0))  # Example order (p, d, q)
model_arima_fit = model_arima.fit()

# Forecasting
forecast_arima = model_arima_fit.forecast(steps=30)  # Forecasting 30 days ahead

# Plotting ARIMA forecast
plt.figure(figsize=(12, 6))
plt.plot(data.index[-100:], data['Close'].tail(100), label='Actual Prices')
plt.plot(pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=30, freq='D'), forecast_arima, label='ARIMA Forecast')
plt.title('ARIMA Stock Price Forecasting for AAPL')
plt.xlabel('Date')
plt.ylabel('Stock Price ($)')
plt.legend()
plt.grid(True)
plt.show()

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Data preprocessing
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(np.array(data['Close']).reshape(-1, 1))

# Create sequences for LSTM
def create_sequences(data, seq_length):
    x = []
    y = []
    for i in range(seq_length, len(data)):
        x.append(data[i-seq_length:i, 0])
        y.append(data[i, 0])
    return np.array(x), np.array(y)

seq_length = 30  # Sequence length
x_lstm, y_lstm = create_sequences(scaled_data, seq_length)

# Reshape data for LSTM input [samples, time steps, features]
x_lstm = np.reshape(x_lstm, (x_lstm.shape[0], x_lstm.shape[1], 1))

# Build LSTM model
model_lstm = Sequential()
model_lstm.add(LSTM(units=50, return_sequences=False, input_shape=(seq_length, 1)))
model_lstm.add(Dense(units=1))

model_lstm.compile(optimizer='adam', loss='mean_squared_error')

# Fit LSTM model
model_lstm.fit(x_lstm, y_lstm, epochs=50, batch_size=32)

# Forecasting
forecast_lstm = []
current_batch = scaled_data[-seq_length:].reshape((1, seq_length, 1))

for i in range(30):  # Forecasting 30 days ahead
    current_pred = model_lstm.predict(current_batch)[0]
    forecast_lstm.append(current_pred)
    current_batch = np.append(current_batch[:, 1:, :], [[current_pred]], axis=1)

forecast_lstm = scaler.inverse_transform(forecast_lstm)

# Plotting forecasts
plt.figure(figsize=(12, 6))
plt.plot(data.index[-100:], data['Close'].tail(100), label='Actual Prices')
plt.plot(pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=30, freq='D'), forecast_arima, label='ARIMA Forecast')
plt.plot(pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=30, freq='D'), forecast_lstm, label='LSTM Forecast')
plt.title('Stock Price Forecasting for AAPL')
plt.xlabel('Date')
plt.ylabel('Stock Price ($)')
plt.legend()
plt.grid(True)
plt.show()

pip install yfinance pandas matplotlib statsmodels scikit-learn tensorflow

pip install Sequential

pip install tensorflow
